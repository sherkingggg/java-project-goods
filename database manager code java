package DB;

import java.sql.*;
import java.util.ArrayList;

public class DBManager {

    private static Connection connection;

    static {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");

            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/bitlab_javaee_db?serverTimezone=UTC","root","");

        }catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }

    public static ArrayList<News> getNews(String lang, String type){
        ArrayList<News> news = new ArrayList<>();
        ArrayList<News> news2 = new ArrayList<>();

        try {
            PreparedStatement ps = connection.prepareStatement("SELECT n.id,n.likes,n.title,n.content, n.type, n.post_date, n.language_id, n.url, n.account_id, a.email, a.password, a.fullName, a.nickname " +
                    "FROM news n " +
                    "INNER JOIN accounts a ON n.account_id = a.id WHERE type='" + type + "'");

            ResultSet rs = ps.executeQuery();

            while (rs.next()){
                news.add(
                        new News(
                                rs.getLong("id"),
                                rs.getString("title"),
                                rs.getString("content"),
                                rs.getInt("language_id"),
                                rs.getDate("post_date"),
                                rs.getString("type"),
                                rs.getString("url"),
                                new Account(
                                        rs.getLong("account_id"),
                                        rs.getString("email"),
                                        rs.getString("password"),
                                        rs.getString("fullName"),
                                        rs.getString("nickname"),null
                                ),
                                rs.getInt("likes")
                        )
                );
            }

            for (News news1 : news){
                if (Integer.parseInt(lang) == news1.getLanguageId()){
                    news2.add(news1);
                }
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return news2;
    }

    public static ArrayList<Friends> getFriends(Long user_id){
        ArrayList<Friends> friends = new ArrayList<>();

        try {
            PreparedStatement ps = connection.prepareStatement("SELECT f.id,f.user_id,f.friend_id,f.added_time,a.fullName,a.url,a.nickname " +
                    "FROM friends f " +
                    "INNER JOIN accounts a ON f.friend_id = a.id " +
                    "WHERE f.user_id=?");

            ps.setLong(1,user_id);

            ResultSet rs = ps.executeQuery();

            while (rs.next()){
                friends.add(
                        new Friends(
                            rs.getLong("id"),
                                rs.getInt("user_id"),
                                new Account(
                                        rs.getLong("friend_id"),
                                        null,null,rs.getString("fullName"),
                                        rs.getString("nickname"),
                                        rs.getString("url")
                                ),
                                rs.getTimestamp("added_time")
                        )
                );
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return friends;
    }

    public static String getStatus(Long user_id,Long friend_id){
        String status = "";

        try {
            PreparedStatement ps = connection.prepareStatement("SELECT f.id,f.user_id,f.friend_id,f.added_time,a.fullName,a.url,a.nickname " +
                    "FROM friends f " +
                    "INNER JOIN accounts a ON f.friend_id = a.id " +
                    "WHERE f.user_id=? AND f.friend_id=? " +
                    "OR f.friend_id=? AND f.user_id=?");

            ps.setLong(1,user_id);
            ps.setLong(2,friend_id);
            ps.setLong(3,user_id);
            ps.setLong(4,friend_id);


            ResultSet rs = ps.executeQuery();

            if (rs.next()){
                status = "friends";
            }
        }catch (Exception e){
            e.printStackTrace();
        }

        try {
            PreparedStatement ps = connection.prepareStatement("SELECT f.id,f.user_id,f.request_sender_id,f.sent_time,a.fullName,a.url,a.nickname " +
                    "FROM `friends requests` f " +
                    "INNER JOIN accounts a ON f.request_sender_id = a.id " +
                    "WHERE f.user_id=? AND f.request_sender_id=? ");

            ps.setLong(1,user_id);
            ps.setLong(2,friend_id);


            ResultSet rs = ps.executeQuery();

            if (rs.next()){
                status = "request sent";
            }
        }catch (Exception e){
            e.printStackTrace();
        }

        if (status.equals("")){
            return "nothing";
        } else {
            return status;
        }
    }

    public static News getBlog(String id){
        News news = null;

        try {
            PreparedStatement ps = connection.prepareStatement("SELECT n.id,n.likes,n.title,n.content, n.type, n.post_date, n.language_id, n.url, n.account_id, a.email, a.password, a.fullName, a.nickname,a.url " +
                    "FROM news n " +
                    "INNER JOIN accounts a ON n.account_id = a.id WHERE n.id=" + id);

            ResultSet rs = ps.executeQuery();

            while (rs.next()){
                news = new News(
                                rs.getLong("id"),
                                rs.getString("title"),
                                rs.getString("content"),
                                rs.getInt("language_id"),
                                rs.getDate("post_date"),
                                rs.getString("type"),
                                rs.getString("n.url"),
                                new Account(
                                        rs.getLong("account_id"),
                                        rs.getString("email"),
                                        rs.getString("password"),
                                        rs.getString("fullName"),
                                        rs.getString("nickname"),
                                        rs.getString("a.url")
                                ),
                        rs.getInt("likes")
                );
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return news;
    }

    public static boolean updateAccount(Long id, Account account){

        int rows = 0;

        try {
            PreparedStatement ps = connection.prepareStatement("" +
                    "UPDATE accounts SET email=?,password=?,fullName=?, nickname=? WHERE id=?");

            ps.setString(1,account.getEmail());
            ps.setString(2,account.getPassword());
            ps.setString(3,account.getFullName());
            ps.setString(4,account.getNickname());
            ps.setLong(5,id);

            rows = ps.executeUpdate();

            ps.close();

        }catch (Exception e){
            e.printStackTrace();
        }
        return rows>0;
    }

    public static ArrayList<News> getLangNews(String lang){
        ArrayList<News> news = new ArrayList<>();

        try {
            PreparedStatement ps = connection.prepareStatement("SELECT n.id,n.title,n.likes,n.content, n.type, n.post_date, n.language_id, n.url, n.account_id, a.email, a.password, a.fullName, a.nickname,a.url " +
                    "FROM news n " +
                    "INNER JOIN accounts a ON n.account_id = a.id WHERE language_id=" + lang);

            ResultSet rs = ps.executeQuery();

            while (rs.next()){
                news.add(
                        new News(
                                rs.getLong("id"),
                                rs.getString("title"),
                                rs.getString("content"),
                                rs.getInt("language_id"),
                                rs.getDate("post_date"),
                                rs.getString("type"),
                                rs.getString("n.url"),
                                new Account(
                                        rs.getLong("account_id"),
                                        rs.getString("email"),
                                        rs.getString("password"),
                                        rs.getString("fullName"),
                                        rs.getString("nickname"),
                                        rs.getString("a.url")
                                ),
                                rs.getInt("likes")
                        )
                );
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return news;
    }

    public static ArrayList<News> getAllNews(){
        ArrayList<News> news = new ArrayList<>();

        try {
            PreparedStatement ps = connection.prepareStatement("SELECT n.id,n.title,n.content, n.likes, n.type, n.post_date, n.language_id, n.url, n.account_id, a.email, a.password, a.fullName, a.nickname,a.url " +
                    "FROM news n " +
                    "INNER JOIN accounts a ON n.account_id = a.id");

            ResultSet rs = ps.executeQuery();

            while (rs.next()){
                news.add(
                        new News(
                                rs.getLong("id"),
                                rs.getString("title"),
                                rs.getString("content"),
                                rs.getInt("language_id"),
                                rs.getDate("post_date"),
                                rs.getString("type"),
                                rs.getString("n.url"),

                                new Account(
                                        rs.getLong("account_id"),
                                        rs.getString("email"),
                                        rs.getString("password"),
                                        rs.getString("fullName"),
                                        rs.getString("nickname"),
                                        rs.getString("a.url")
                                ),
                                rs.getInt("likes")
                        )
                );
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return news;
    }

    public static ArrayList<News> getAllNews(Long id){
        ArrayList<News> news = new ArrayList<>();

        try {
            PreparedStatement ps = connection.prepareStatement("SELECT n.id,n.title,n.content, n.likes, n.type, n.post_date, n.language_id, n.url, n.account_id, a.email, a.password, a.fullName, a.nickname,a.url " +
                    "FROM news n " +
                    "INNER JOIN accounts a ON n.account_id = a.id " +
                    "WHERE n.account_id=?");

            ps.setLong(1,id);

            ResultSet rs = ps.executeQuery();

            while (rs.next()){
                news.add(
                        new News(
                                rs.getLong("id"),
                                rs.getString("title"),
                                rs.getString("content"),
                                rs.getInt("language_id"),
                                rs.getDate("post_date"),
                                rs.getString("type"),
                                rs.getString("n.url"),

                                new Account(
                                        rs.getLong("account_id"),
                                        rs.getString("email"),
                                        rs.getString("password"),
                                        rs.getString("fullName"),
                                        rs.getString("nickname"),
                                        rs.getString("a.url")
                                ),
                                rs.getInt("likes")
                        )
                );
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return news;
    }



    public static ArrayList<Account> getAllAccounts(){
        ArrayList<Account> accounts = new ArrayList<>();

        try {
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM accounts");

            ResultSet rs = ps.executeQuery();

            while (rs.next()){
                accounts.add(
                        new Account(
                                rs.getLong("id"),
                                rs.getString("email"),
                                rs.getString("password"),
                                rs.getString("fullName"),
                                rs.getString("nickname"),
                                rs.getString("url")
                        )
                );
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return accounts;
    }

    public static ArrayList<Account> getAccounts(String search){
        ArrayList<Account> accounts = new ArrayList<>();

        try {
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM accounts WHERE fullName=?");

            ps.setString(1,search);

            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                accounts.add(
                        new Account(
                                rs.getLong("id"),
                                rs.getString("email"),
                                rs.getString("password"),
                                rs.getString("fullName"),
                                rs.getString("nickname"),
                                rs.getString("url")
                        )
                );
            }
        }catch (Exception e){
            e.printStackTrace();
        }

        try {
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM accounts WHERE nickname=?");

            ps.setString(1,search);

            ResultSet rs = ps.executeQuery();

            while (rs.next()){
                    accounts.add(
                            new Account(
                                    rs.getLong("id"),
                                    rs.getString("email"),
                                    rs.getString("password"),
                                    rs.getString("fullName"),
                                    rs.getString("nickname"),
                                    rs.getString("url")
                            )
                    );
            }
        }catch (Exception e){
            e.printStackTrace();
        }

        return accounts;
    }





    public static Account getAccount(String email){
        Account account = null;

        try {
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM accounts where email=?");

            ps.setString(1,email);

            ResultSet rs = ps.executeQuery();

            while (rs.next()){
                        account = new Account(
                                rs.getLong("id"),
                                rs.getString("email"),
                                rs.getString("password"),
                                rs.getString("fullName"),
                                rs.getString("nickname"),
                                rs.getString("url")
                );
            }
            ps.close();
        }catch (Exception e){
            e.printStackTrace();
        }
        return account;
    }

    public static Account getAccount(Long id){
        Account account = null;

        try {
            PreparedStatement ps = connection.prepareStatement("SELECT * FROM accounts where id=?");

            ps.setLong(1,id);

            ResultSet rs = ps.executeQuery();

            while (rs.next()){
                account = new Account(
                        rs.getLong("id"),
                        rs.getString("email"),
                        rs.getString("password"),
                        rs.getString("fullName"),
                        rs.getString("nickname"),
                        rs.getString("url")
                );
            }
            ps.close();
        }catch (Exception e){
            e.printStackTrace();
        }
        return account;
    }

    public static boolean addAccount(Account account){
        int rows = 0;
        try{

            PreparedStatement ps = connection.prepareStatement("" +
                    "INSERT INTO accounts (email,password,fullName,nickname,url) " +
                    "VALUES (?,?,?,?,?)");

            ps.setString(1,account.getEmail());
            ps.setString(2,account.getPassword());
            ps.setString(3,account.getFullName());
            ps.setString(4,account.getNickname());
            ps.setString(5,account.getUrl());

            rows = ps.executeUpdate();

            ps.close();

        }catch (Exception e){
            e.printStackTrace();
        }

        return rows>0;
    }

    public static boolean addFriends(Long user_id, Long friend_id){
        int rows = 0;

        try{

            PreparedStatement ps = connection.prepareStatement("" +
                    "INSERT INTO friends (user_id,friend_id,added_time) " +
                    "VALUES (?,?,NOW())");

            ps.setLong(1,user_id);
            ps.setLong(2,friend_id);
            rows = ps.executeUpdate();

            ps.close();

        }catch (Exception e){
            e.printStackTrace();
        }

        try{

            PreparedStatement ps = connection.prepareStatement("" +
                    "INSERT INTO friends (user_id,friend_id,added_time) " +
                    "VALUES (?,?,NOW())");

            ps.setLong(1,friend_id);
            ps.setLong(2,user_id);
            rows = ps.executeUpdate();

            ps.close();

        }catch (Exception e){
            e.printStackTrace();
        }

        return rows>0;
    }

    public static boolean deleteFriends(Long user_id, Long friend_id){
        int rows = 0;

        try{

            PreparedStatement ps = connection.prepareStatement("" +
                    "DELETE FROM friends WHERE user_id=? AND friend_id=?");

            ps.setLong(1,user_id);
            ps.setLong(2,friend_id);
            rows = ps.executeUpdate();

            ps.close();

        }catch (Exception e){
            e.printStackTrace();
        }

        try{

            PreparedStatement ps = connection.prepareStatement("" +
                    "DELETE FROM friends WHERE user_id=? AND friend_id=?");

            ps.setLong(1,friend_id);
            ps.setLong(2,user_id);
            rows = ps.executeUpdate();

            ps.close();

        }catch (Exception e){
            e.printStackTrace();
        }

        return rows>0;
    }

    public static ArrayList<Requests> getRequests(Long id){
        ArrayList<Requests> requests = new ArrayList<>();

        try {
            PreparedStatement ps = connection.prepareStatement("SELECT f.id,f.user_id,f.request_sender_id,f.sent_time,a.fullName,a.url,a.nickname " +
                    "FROM `friends requests` f " +
                    "INNER JOIN accounts a ON f.user_id = a.id " +
                    "WHERE f.request_sender_id=?");

            ps.setLong(1,id);

            ResultSet rs = ps.executeQuery();

            while (rs.next()){
                requests.add(
                        new Requests(
                                rs.getLong("id"),
                                new Account(
                                    rs.getLong("user_id"),
                                    null,null,
                                    rs.getString("fullName"),
                                    rs.getString("nickname"),
                                    rs.getString("url")
                                ),
                                rs.getInt("request_sender_id"),
                                rs.getTimestamp("sent_time")
                        )
                );
            }
        }catch (Exception e){
            e.printStackTrace();
        }

        return requests;
    }

    public static ArrayList<Requests> getMyRequests(Long id){
        ArrayList<Requests> requests = new ArrayList<>();

        try {
            PreparedStatement ps = connection.prepareStatement("SELECT f.id,f.user_id,f.request_sender_id,f.sent_time,a.fullName,a.url,a.nickname " +
                    "FROM `friends requests` f " +
                    "INNER JOIN accounts a ON f.request_sender_id = a.id " +
                    "WHERE f.user_id=?");

            ps.setLong(1,id);

            ResultSet rs = ps.executeQuery();

            while (rs.next()){
                requests.add(
                        new Requests(
                                rs.getLong("id"),
                                rs.getInt("user_id"),
                                new Account(
                                        rs.getLong("request_sender_id"),
                                        null,null,
                                        rs.getString("fullName"),
                                        rs.getString("nickname"),
                                        rs.getString("url")
                                ),
                                rs.getTimestamp("sent_time")
                        )
                );
            }
        }catch (Exception e){
            e.printStackTrace();
        }

        return requests;
    }

    public static boolean addRequest(Long user_id, Long tosend_id){
        int rows = 0;

        try{

            PreparedStatement ps2 = connection.prepareStatement("SELECT f.id,f.user_id,f.request_sender_id,f.sent_time,a.fullName,a.url,a.nickname " +
                    "FROM `friends requests` f " +
                    "INNER JOIN accounts a ON f.request_sender_id = a.id " +
                    "WHERE f.user_id=? AND f.request_sender_id=? ");

            ps2.setLong(1,user_id);
            ps2.setLong(2,tosend_id);

            ResultSet rs = ps2.executeQuery();

            if (rs.next()){
                rows = 0;
            } else {
                PreparedStatement ps = connection.prepareStatement("" +
                        "INSERT INTO `friends requests` (user_id,request_sender_id,sent_time) " +
                        "VALUES (?,?,NOW())");

                ps.setLong(1,user_id);
                ps.setLong(2,tosend_id);

                rows = ps.executeUpdate();

                ps.close();
            }
        }catch (Exception e){
            e.printStackTrace();
        }

        return rows>0;
    }

    public static boolean deleteRequest(Long user_id, Long tosend_id){
        int rows = 0;

        try{
            PreparedStatement ps = connection.prepareStatement("" +
                    "DELETE FROM `friends requests` WHERE request_sender_id=? AND user_id=?");

            ps.setLong(1,tosend_id);
            ps.setLong(2,user_id);

            rows = ps.executeUpdate();
            ps.close();

        }catch (Exception e){
            e.printStackTrace();
        }
        return rows>0;
    }

    public static boolean addNews(News news){
        int rows = 0;
        try{

            PreparedStatement ps = connection.prepareStatement("" +
                    "INSERT INTO news (title,content,post_date,type,language_id,url,account_id) " +
                    "VALUES (?,?,NOW(),?,?,?,?)");

            ps.setString(1,news.getTitle());
            ps.setString(2,news.getContent());
            ps.setString(3,news.getType());
            ps.setInt(4,news.getLanguageId());
            ps.setString(5,news.getUrl());
            ps.setLong(6,news.getAccount().getId());

            rows = ps.executeUpdate();

            ps.close();

        }catch (Exception e){
            e.printStackTrace();
        }

        return rows>0;
    }
    public static boolean addComment(Comment comment){
        int rows = 0;
        try{

            PreparedStatement ps = connection.prepareStatement("" +
                    "INSERT INTO comments (comment, blog_id,post_date,account_id) " +
                    "VALUES (?,?,NOW(),?)");

            ps.setString(1,comment.getComment());
            ps.setLong(2,comment.getNews().getId());
            ps.setLong(3,comment.getAccount().getId());

            rows = ps.executeUpdate();

            ps.close();

        }catch (Exception e){
            e.printStackTrace();
        }

        return rows>0;
    }

    public static boolean deleteAccount(String id){
        int rows = 0;
        try{

            PreparedStatement ps = connection.prepareStatement("" +
                    "DELETE FROM accounts WHERE id=?");

            ps.setString(1,id);

            rows = ps.executeUpdate();

            ps.close();

        }catch (Exception e){
            e.printStackTrace();
        }

        return rows>0;
    }

    public static boolean deleteComment(Long id, Long accountId){
        int rows = 0;
        try{

            PreparedStatement ps = connection.prepareStatement("" +
                    "DELETE FROM comments WHERE id=? AND account_id=?");

            ps.setLong(1,id);
            ps.setLong(2,accountId);

            rows = ps.executeUpdate();

            ps.close();

        }catch (Exception e){
            e.printStackTrace();
        }

        return rows>0;
    }

    public static ArrayList<Comment> getAllComments(Long blog_id){
        ArrayList<Comment> comments = new ArrayList<>();

        try {
            PreparedStatement ps = connection.prepareStatement("SELECT c.id,c.comment,c.post_date, c.account_id,c.blog_id,a.nickname,a.url " +
                    "FROM comments c " +
                    "INNER JOIN accounts a ON c.account_id = a.id " +
                    "WHERE c.blog_id=?");

            ps.setLong(1,blog_id);

            ResultSet rs = ps.executeQuery();

            while (rs.next()){
                comments.add(
                        new Comment(
                                rs.getLong("id"),
                                new News(
                                        rs.getLong("blog_id"),
                                        null,null,0,null,null,null,null
                                ),
                                new Account(
                                        rs.getLong("account_id"),
                                        null,null,null,
                                        rs.getString("nickname"),
                                        rs.getString("url")
                                ),
                                rs.getString("comment"),
                                rs.getTimestamp("post_date")

                        )
                );
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return comments;
    }

    public static int toLike(Long blog_id, Long accountId){
        boolean liked = false;
        int likeAmount = 0;

        try{

            PreparedStatement ps = connection.prepareStatement("" +
                    "SELECT * FROM blog_likes WHERE blog_id=? AND account_id=?");

            ps.setLong(1,blog_id);
            ps.setLong(2,accountId);

            ResultSet rs = ps.executeQuery();

            if (rs.next()){
                liked = true;
            }
        }catch (Exception e){
            e.printStackTrace();
        }


        try{
            String query = "DELETE FROM blog_likes WHERE blog_id=? AND account_id=?";

            if (!liked){
                query = "INSERT into blog_likes (blog_id,account_id) values (?,?)";
            }

            PreparedStatement ps = connection.prepareStatement(query);

            ps.setLong(1,blog_id);
            ps.setLong(2,accountId);

            ps.executeUpdate();

            ps.close();

        }catch (Exception e){
            e.printStackTrace();
        }

        try{
            PreparedStatement ps = connection.prepareStatement("" +
                    "SELECT COUNT(*) like_amount FROM blog_likes WHERE blog_id=?");

            ps.setLong(1,blog_id);

            ResultSet rs = ps.executeQuery();

            while (rs.next()){
                likeAmount = rs.getInt("like_amount");
            }

            ps.close();

        }catch (Exception e){
            e.printStackTrace();
        }

        try{
            PreparedStatement ps = connection.prepareStatement("" +
                    "UPDATE news SET likes = ? WHERE id=?");

            ps.setInt(1,likeAmount);
            ps.setLong(2,blog_id);

            ps.executeUpdate();

            ps.close();

        }catch (Exception e){
            e.printStackTrace();
        }

        return likeAmount;
    }

    public static boolean isLiked(Long blog_id, Long accountId){
        boolean liked = false;

        try{

            PreparedStatement ps = connection.prepareStatement("" +
                    "SELECT * FROM blog_likes WHERE blog_id=? AND account_id=?");

            ps.setLong(1,blog_id);
            ps.setLong(2,accountId);

            ResultSet rs = ps.executeQuery();

            if (rs.next()){
                liked = true;
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return liked;
    }
}
